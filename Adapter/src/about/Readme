O Adapter é um padrão de projeto estrutural que permite objetos com interfaces incompatíveis colaborarem entre si.

Exemplo, um sistema bancario utiliza leitor xml para importar certas informações, porém entrou um novo sistema que gera dados no formato json, com o adapter, você consegue "adaptar"
o seu sitema a receber os dados jsons do sistema terceiro sem ter que mudar o funcionamento do outro sistema.
Para isso você pode criar um adaptador. Ele é um objeto especial que converte a interface de um objeto para que outro objeto possa entendê-lo.

 Utilize a classe Adaptador quando você quer usar uma classe existente, mas sua interface não for compatível com o resto do seu código.
 Utilize o padrão quando você quer reutilizar diversas subclasses existentes que não possuam alguma funcionalidade comum que não pode ser adicionada a superclasse.
 
 Vantagens
 Princípio de responsabilidade única. Você pode separar a conversão de interface ou de dados da lógica primária do negócio do programa.
 Princípio aberto/fechado. Você pode introduzir novos tipos de adaptadores no programa sem quebrar o código cliente existente, 
 desde que eles trabalhem com os adaptadores através da interface cliente.
 
 Desvantagens
 Complexidade geral do código pode aumentar: A complexidade geral do código aumenta porque você precisa introduzir um conjunto 
 de novas interfaces e classes. Algumas vezes é mais simples mudar a classe serviço para que ela se adeque com o resto do seu código.